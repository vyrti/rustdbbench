services:
  redis:
    image: redis:latest # Official image, typically multi-arch
    platform: linux/arm64
    container_name: redis_benchmark
    ports:
      - "6379:6379"
    # Command to disable persistence for benchmark focus (optional)
    # This makes it faster but data is lost on restart if not explicitly saved.
    command: redis-server --save "" --appendonly no --io-threads 8 --io-threads-do-reads no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  valkey:
    image: valkey/valkey:latest # Official image, typically multi-arch
    platform: linux/arm64
    container_name: valkey_benchmark
    ports:
      - "6380:6379" # Valkey internally listens on 6379, map to host 6380
    # Command to disable persistence for benchmark focus (optional)
    command: valkey-server --save "" --appendonly no --io-threads 8 --io-threads-do-reads no
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  nats:
    image: nats:alpine
    platform: linux/arm64 # Match the platform of other services for consistency
    container_name: nats_benchmark
    ports:
      - "4222:4222" # Client port
      - "8222:8222" # Monitoring port
      - "6222:6222" # Routing port for clustering
    # The default command is sufficient to start the server.
    # For more advanced configs, like enabling JetStream, you would add:
    # command: nats-server -js
    healthcheck:
      # NATS server responds on the monitoring endpoint when healthy.
      # The `nats` image doesn't have `wget`, so we use a simple check.
      test: ["CMD", "nats", "server", "check"]
      interval: 1s
      timeout: 3s
      retries: 30

networks:
  default:
    driver: bridge